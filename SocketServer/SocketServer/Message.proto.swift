/// Generated by the Protocol Buffers 3.3.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.16
/// Source file "Message.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct MessageRoot {
    public static let `default` = MessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class UserInfo : GeneratedMessage {

    public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasIconUrl == rhs.hasIconUrl) && (!lhs.hasIconUrl || lhs.iconUrl == rhs.iconUrl)
        fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var iconUrl:String! = nil
    public fileprivate(set) var hasIconUrl:Bool = false

    public fileprivate(set) var level:Int64! = nil
    public fileprivate(set) var hasLevel:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasName {
            return false
        }
        if !hasIconUrl {
            return false
        }
        if !hasLevel {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
        }
        if hasIconUrl {
            try codedOutputStream.writeString(fieldNumber: 2, value:iconUrl)
        }
        if hasLevel {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:level)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
        }
        if hasIconUrl {
            serialize_size += iconUrl.computeStringSize(fieldNumber: 2)
        }
        if hasLevel {
            serialize_size += level.computeInt64Size(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserInfo.Builder {
        return UserInfo.classBuilder() as! UserInfo.Builder
    }
    public func getBuilder() -> UserInfo.Builder {
        return classBuilder() as! UserInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    public func toBuilder() throws -> UserInfo.Builder {
        return try UserInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
        return try UserInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasName {
            jsonMap["name"] = name
        }
        if hasIconUrl {
            jsonMap["iconUrl"] = iconUrl
        }
        if hasLevel {
            jsonMap["level"] = "\(level)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
        return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> UserInfo {
        return try UserInfo.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasIconUrl {
            output += "\(indent) iconUrl: \(iconUrl) \n"
        }
        if hasLevel {
            output += "\(indent) level: \(level) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasIconUrl {
                hashCode = (hashCode &* 31) &+ iconUrl.hashValue
            }
            if hasLevel {
                hashCode = (hashCode &* 31) &+ level.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserInfo"
    }
    override public func className() -> String {
        return "UserInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserInfo = UserInfo()
        public func getMessage() -> UserInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> UserInfo.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> UserInfo.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var iconUrl:String {
            get {
                return builderResult.iconUrl
            }
            set (value) {
                builderResult.hasIconUrl = true
                builderResult.iconUrl = value
            }
        }
        public var hasIconUrl:Bool {
            get {
                return builderResult.hasIconUrl
            }
        }
        @discardableResult
        public func setIconUrl(_ value:String) -> UserInfo.Builder {
            self.iconUrl = value
            return self
        }
        @discardableResult
        public func clearIconUrl() -> UserInfo.Builder{
            builderResult.hasIconUrl = false
            builderResult.iconUrl = nil
            return self
        }
        public var level:Int64 {
            get {
                return builderResult.level
            }
            set (value) {
                builderResult.hasLevel = true
                builderResult.level = value
            }
        }
        public var hasLevel:Bool {
            get {
                return builderResult.hasLevel
            }
        }
        @discardableResult
        public func setLevel(_ value:Int64) -> UserInfo.Builder {
            self.level = value
            return self
        }
        @discardableResult
        public func clearLevel() -> UserInfo.Builder{
            builderResult.hasLevel = false
            builderResult.level = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserInfo.Builder {
            builderResult = UserInfo()
            return self
        }
        override public func clone() throws -> UserInfo.Builder {
            return try UserInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserInfo {
            let returnMe:UserInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
            if other == UserInfo() {
                return self
            }
            if other.hasName {
                name = other.name
            }
            if other.hasIconUrl {
                iconUrl = other.iconUrl
            }
            if other.hasLevel {
                level = other.level
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    name = try codedInputStream.readString()

                case 18:
                    iconUrl = try codedInputStream.readString()

                case 24:
                    level = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
            let resultDecodedBuilder = UserInfo.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueIconUrl = jsonMap["iconUrl"] as? String {
                resultDecodedBuilder.iconUrl = jsonValueIconUrl
            }
            if let jsonValueLevel = jsonMap["level"] as? String {
                resultDecodedBuilder.level = Int64(jsonValueLevel)!
            } else if let jsonValueLevel = jsonMap["level"] as? Int {
                resultDecodedBuilder.level = Int64(jsonValueLevel)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> UserInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ChatMessage : GeneratedMessage {

    public static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUserInfo == rhs.hasUserInfo) && (!lhs.hasUserInfo || lhs.userInfo == rhs.userInfo)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var userInfo:UserInfo!
    public fileprivate(set) var hasUserInfo:Bool = false
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasUserInfo {
            return false
        }
        if !hasName {
            return false
        }
        if !userInfo.isInitialized() {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:userInfo)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 2, value:name)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUserInfo {
            if let varSizeuserInfo = userInfo?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuserInfo
            }
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ChatMessage.Builder {
        return ChatMessage.classBuilder() as! ChatMessage.Builder
    }
    public func getBuilder() -> ChatMessage.Builder {
        return classBuilder() as! ChatMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    public func toBuilder() throws -> ChatMessage.Builder {
        return try ChatMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ChatMessage) throws -> ChatMessage.Builder {
        return try ChatMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUserInfo {
            jsonMap["userInfo"] = try userInfo.encode()
        }
        if hasName {
            jsonMap["name"] = name
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ChatMessage {
        return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> ChatMessage {
        return try ChatMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUserInfo {
            output += "\(indent) userInfo {\n"
            if let outDescUserInfo = userInfo {
                output += try outDescUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserInfo {
                if let hashValueuserInfo = userInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuserInfo
                }
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ChatMessage"
    }
    override public func className() -> String {
        return "ChatMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ChatMessage = ChatMessage()
        public func getMessage() -> ChatMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var userInfo:UserInfo! {
            get {
                if userInfoBuilder_ != nil {
                    builderResult.userInfo = userInfoBuilder_.getMessage()
                }
                return builderResult.userInfo
            }
            set (value) {
                builderResult.hasUserInfo = true
                builderResult.userInfo = value
            }
        }
        public var hasUserInfo:Bool {
            get {
                return builderResult.hasUserInfo
            }
        }
        fileprivate var userInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUserInfo = true
            }
        }
        public func getUserInfoBuilder() -> UserInfo.Builder {
            if userInfoBuilder_ == nil {
                userInfoBuilder_ = UserInfo.Builder()
                builderResult.userInfo = userInfoBuilder_.getMessage()
                if userInfo != nil {
                    try! userInfoBuilder_.mergeFrom(other: userInfo)
                }
            }
            return userInfoBuilder_
        }
        @discardableResult
        public func setUserInfo(_ value:UserInfo!) -> ChatMessage.Builder {
            self.userInfo = value
            return self
        }
        @discardableResult
        public func mergeUserInfo(value:UserInfo) throws -> ChatMessage.Builder {
            if builderResult.hasUserInfo {
                builderResult.userInfo = try UserInfo.builderWithPrototype(prototype:builderResult.userInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.userInfo = value
            }
            builderResult.hasUserInfo = true
            return self
        }
        @discardableResult
        public func clearUserInfo() -> ChatMessage.Builder {
            userInfoBuilder_ = nil
            builderResult.hasUserInfo = false
            builderResult.userInfo = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> ChatMessage.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> ChatMessage.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ChatMessage.Builder {
            builderResult = ChatMessage()
            return self
        }
        override public func clone() throws -> ChatMessage.Builder {
            return try ChatMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ChatMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ChatMessage {
            let returnMe:ChatMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ChatMessage) throws -> ChatMessage.Builder {
            if other == ChatMessage() {
                return self
            }
            if (other.hasUserInfo) {
                try mergeUserInfo(value: other.userInfo)
            }
            if other.hasName {
                name = other.name
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ChatMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUserInfo {
                        try subBuilder.mergeFrom(other: userInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    userInfo = subBuilder.buildPartial()

                case 18:
                    name = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ChatMessage.Builder {
            let resultDecodedBuilder = ChatMessage.Builder()
            if let jsonValueUserInfo = jsonMap["userInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.userInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUserInfo).build()

            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> ChatMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class GiftMessage : GeneratedMessage {

    public static func == (lhs: GiftMessage, rhs: GiftMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUserInfo == rhs.hasUserInfo) && (!lhs.hasUserInfo || lhs.userInfo == rhs.userInfo)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasImgUrl == rhs.hasImgUrl) && (!lhs.hasImgUrl || lhs.imgUrl == rhs.imgUrl)
        fieldCheck = fieldCheck && (lhs.hasImgCount == rhs.hasImgCount) && (!lhs.hasImgCount || lhs.imgCount == rhs.imgCount)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var userInfo:UserInfo!
    public fileprivate(set) var hasUserInfo:Bool = false
    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var imgUrl:String! = nil
    public fileprivate(set) var hasImgUrl:Bool = false

    public fileprivate(set) var imgCount:Int64! = nil
    public fileprivate(set) var hasImgCount:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        if !hasUserInfo {
            return false
        }
        if !hasName {
            return false
        }
        if !hasImgUrl {
            return false
        }
        if !hasImgCount {
            return false
        }
        if !userInfo.isInitialized() {
            return false
        }
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:userInfo)
        }
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 2, value:name)
        }
        if hasImgUrl {
            try codedOutputStream.writeString(fieldNumber: 3, value:imgUrl)
        }
        if hasImgCount {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:imgCount)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUserInfo {
            if let varSizeuserInfo = userInfo?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuserInfo
            }
        }
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 2)
        }
        if hasImgUrl {
            serialize_size += imgUrl.computeStringSize(fieldNumber: 3)
        }
        if hasImgCount {
            serialize_size += imgCount.computeInt64Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> GiftMessage.Builder {
        return GiftMessage.classBuilder() as! GiftMessage.Builder
    }
    public func getBuilder() -> GiftMessage.Builder {
        return classBuilder() as! GiftMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    public func toBuilder() throws -> GiftMessage.Builder {
        return try GiftMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:GiftMessage) throws -> GiftMessage.Builder {
        return try GiftMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUserInfo {
            jsonMap["userInfo"] = try userInfo.encode()
        }
        if hasName {
            jsonMap["name"] = name
        }
        if hasImgUrl {
            jsonMap["imgUrl"] = imgUrl
        }
        if hasImgCount {
            jsonMap["imgCount"] = "\(imgCount)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GiftMessage {
        return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> GiftMessage {
        return try GiftMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUserInfo {
            output += "\(indent) userInfo {\n"
            if let outDescUserInfo = userInfo {
                output += try outDescUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasName {
            output += "\(indent) name: \(name) \n"
        }
        if hasImgUrl {
            output += "\(indent) imgUrl: \(imgUrl) \n"
        }
        if hasImgCount {
            output += "\(indent) imgCount: \(imgCount) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserInfo {
                if let hashValueuserInfo = userInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuserInfo
                }
            }
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasImgUrl {
                hashCode = (hashCode &* 31) &+ imgUrl.hashValue
            }
            if hasImgCount {
                hashCode = (hashCode &* 31) &+ imgCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "GiftMessage"
    }
    override public func className() -> String {
        return "GiftMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:GiftMessage = GiftMessage()
        public func getMessage() -> GiftMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var userInfo:UserInfo! {
            get {
                if userInfoBuilder_ != nil {
                    builderResult.userInfo = userInfoBuilder_.getMessage()
                }
                return builderResult.userInfo
            }
            set (value) {
                builderResult.hasUserInfo = true
                builderResult.userInfo = value
            }
        }
        public var hasUserInfo:Bool {
            get {
                return builderResult.hasUserInfo
            }
        }
        fileprivate var userInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUserInfo = true
            }
        }
        public func getUserInfoBuilder() -> UserInfo.Builder {
            if userInfoBuilder_ == nil {
                userInfoBuilder_ = UserInfo.Builder()
                builderResult.userInfo = userInfoBuilder_.getMessage()
                if userInfo != nil {
                    try! userInfoBuilder_.mergeFrom(other: userInfo)
                }
            }
            return userInfoBuilder_
        }
        @discardableResult
        public func setUserInfo(_ value:UserInfo!) -> GiftMessage.Builder {
            self.userInfo = value
            return self
        }
        @discardableResult
        public func mergeUserInfo(value:UserInfo) throws -> GiftMessage.Builder {
            if builderResult.hasUserInfo {
                builderResult.userInfo = try UserInfo.builderWithPrototype(prototype:builderResult.userInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.userInfo = value
            }
            builderResult.hasUserInfo = true
            return self
        }
        @discardableResult
        public func clearUserInfo() -> GiftMessage.Builder {
            userInfoBuilder_ = nil
            builderResult.hasUserInfo = false
            builderResult.userInfo = nil
            return self
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> GiftMessage.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> GiftMessage.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var imgUrl:String {
            get {
                return builderResult.imgUrl
            }
            set (value) {
                builderResult.hasImgUrl = true
                builderResult.imgUrl = value
            }
        }
        public var hasImgUrl:Bool {
            get {
                return builderResult.hasImgUrl
            }
        }
        @discardableResult
        public func setImgUrl(_ value:String) -> GiftMessage.Builder {
            self.imgUrl = value
            return self
        }
        @discardableResult
        public func clearImgUrl() -> GiftMessage.Builder{
            builderResult.hasImgUrl = false
            builderResult.imgUrl = nil
            return self
        }
        public var imgCount:Int64 {
            get {
                return builderResult.imgCount
            }
            set (value) {
                builderResult.hasImgCount = true
                builderResult.imgCount = value
            }
        }
        public var hasImgCount:Bool {
            get {
                return builderResult.hasImgCount
            }
        }
        @discardableResult
        public func setImgCount(_ value:Int64) -> GiftMessage.Builder {
            self.imgCount = value
            return self
        }
        @discardableResult
        public func clearImgCount() -> GiftMessage.Builder{
            builderResult.hasImgCount = false
            builderResult.imgCount = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> GiftMessage.Builder {
            builderResult = GiftMessage()
            return self
        }
        override public func clone() throws -> GiftMessage.Builder {
            return try GiftMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> GiftMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> GiftMessage {
            let returnMe:GiftMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:GiftMessage) throws -> GiftMessage.Builder {
            if other == GiftMessage() {
                return self
            }
            if (other.hasUserInfo) {
                try mergeUserInfo(value: other.userInfo)
            }
            if other.hasName {
                name = other.name
            }
            if other.hasImgUrl {
                imgUrl = other.imgUrl
            }
            if other.hasImgCount {
                imgCount = other.imgCount
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GiftMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUserInfo {
                        try subBuilder.mergeFrom(other: userInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    userInfo = subBuilder.buildPartial()

                case 18:
                    name = try codedInputStream.readString()

                case 26:
                    imgUrl = try codedInputStream.readString()

                case 32:
                    imgCount = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GiftMessage.Builder {
            let resultDecodedBuilder = GiftMessage.Builder()
            if let jsonValueUserInfo = jsonMap["userInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.userInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUserInfo).build()

            }
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueImgUrl = jsonMap["imgUrl"] as? String {
                resultDecodedBuilder.imgUrl = jsonValueImgUrl
            }
            if let jsonValueImgCount = jsonMap["imgCount"] as? String {
                resultDecodedBuilder.imgCount = Int64(jsonValueImgCount)!
            } else if let jsonValueImgCount = jsonMap["imgCount"] as? Int {
                resultDecodedBuilder.imgCount = Int64(jsonValueImgCount)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> GiftMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
        var mergedArray = Array<UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
        return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "iconUrl": return self.iconUrl
        case "level": return self.level
        default: return nil
        }
    }
}
extension UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "iconUrl": return self.iconUrl
            case "level": return self.level
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "iconUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.iconUrl = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.level = newSubscriptValue
            default: return
            }
        }
    }
}
extension ChatMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ChatMessage> {
        var mergedArray = Array<ChatMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ChatMessage? {
        return try ChatMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "userInfo": return self.userInfo
        case "name": return self.name
        default: return nil
        }
    }
}
extension ChatMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "userInfo": return self.userInfo
            case "name": return self.name
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "userInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.userInfo = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            default: return
            }
        }
    }
}
extension GiftMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GiftMessage> {
        var mergedArray = Array<GiftMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> GiftMessage? {
        return try GiftMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:MessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "userInfo": return self.userInfo
        case "name": return self.name
        case "imgUrl": return self.imgUrl
        case "imgCount": return self.imgCount
        default: return nil
        }
    }
}
extension GiftMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "userInfo": return self.userInfo
            case "name": return self.name
            case "imgUrl": return self.imgUrl
            case "imgCount": return self.imgCount
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "userInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.userInfo = newSubscriptValue
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "imgUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.imgUrl = newSubscriptValue
            case "imgCount":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.imgCount = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
